@page "/tasks/{id}"

@if (Item != null)
{
    @if (Item.IsRunning)
    {
        <PageTitle Value="@FormatingUtils.GetTimerTitle(Item, TimeProvider)" />
    }
    <div class="row">
        <div class="col-2">
            <!-- Select project -->
            <button class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                @if (Item.Project != null)
                {
                    <span class="@("small-dot mx-1 " + Item.Project.Color.ToString().ToLower())"></span>
                    <span>
                        @Item.Project.Title
                    </span>
                }
                else
                {
                    <span>Add Project</span>
                }
            </button>
            <div class="dropdown-menu">
                @if (Projects != null && Projects.Length > 0)
                {
                    @foreach (var project in Projects)
                    {
                        <a class="dropdown-item align-items-center @(Item.Project != null && Item.Project.Id == project.Id ? "disabled" : "")" href="#" @onclick="@(() => AddProjectByIdAsync(project.Id))" @onclick:preventDefault>
                            <span class="small-dot @project.Color.ToString().ToLower()"></span><span class="align-top">&nbsp;&nbsp;&nbsp;&nbsp;@project.Title</span>
                        </a>
                    }
                    <div class="dropdown-divider"></div>
                }
                @if (Item.Project != null)
                {
                    <a class="dropdown-item align-middle" href="#" @onclick="@(() => ClearProject())" @onclick:preventDefault>
                        <span class="dot clear"></span><span>Clear @Item.Project.Title</span>
                    </a>
                    <div class="dropdown-divider"></div>
                }
                <a class="dropdown-item align-middle" href="#" data-toggle="modal" data-target="#addProjectModal" @onclick:preventDefault>
                    <span class="dot clear"></span><span>Add New ...</span>
                </a>
            </div>
        </div>
        <div class="col">
            @if (Tags != null && Tags.Length > 0)
            {
                @foreach (var label in Tags)
                {
                    @if (label.added)
                    {
                        <NavLink class="mr-2" href="@("tags/" + label.tag.Id)">
                            <small>
                                <span class="oi oi-tag oi-small" aria-hidden="true"></span>
                                <span>@label.tag.Name</span>
                            </small>
                        </NavLink>

                    }
                }
            }
            <button class="btn btn-default btn-sm btn-outline-primary dropdown-toggle" data-toggle="dropdown">
                Add Tag
            </button>
            <div class="dropdown-menu">
                @if (Tags != null && Tags.Length > 0)
                {
                    @foreach (var tag in Tags)
                    {
                        @if (@tag.added)
                        {
                            <button class="dropdown-item btn btn-default" @onclick="@(() => RemoveTagByIdAsync(tag.tag.Id))">
                                <small>
                                    <span class="oi oi-check" style="font-size:14px" aria-hidden="true"></span>
                                    <span class="ml-1">@tag.tag.Name</span>
                                </small>
                            </button>
                        }
                        else
                        {
                            <button class="dropdown-item btn btn-default" @onclick="@(() => AddTagByIdAsync(tag.tag.Id))">
                                <small>
                                    <span class="ml-4">@tag.tag.Name</span>
                                </small>
                            </button>
                        }
                    }
                    <div class="dropdown-divider"></div>
                }
                <EditForm Model="@NewTagLabel" OnValidSubmit="@(() => AddTagAsync())" class="px-4 py-3">
                    <div class="form-group">
                        <label class="form-check-label" for="newTagEdit">
                            <small>New tag</small>
                        </label>
                        <InputText @bind-Value="@NewTagLabel" class="form-control" placeholder="tag name" id="newTagEdit"></InputText>
                    </div>
                    <button type="submit" class="btn btn-primary">Add</button>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="row pt-2">
        <div class="col">
            <!-- Timer -->
            <div class="d-flex flex-row">
                <div class="container-fluid timer-link" role="document">
                    <div class="d-flex align-items-center">
                        <span class="timer-text timer-text-timespan-lg">
                            @FormatingUtils.FormatTimerElapsedTime(Item, TimeProvider)
                        </span>
                        @if (IsActive)
                        {
                            <button class="btn btn-default ml-2" @onclick="@(() => Stop())">
                                <span class="oi oi-media-pause timer-text-timespan-lg" aria-hidden="true"></span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-default ml-2" @onclick="@(() => Start())">
                                <span class="oi oi-media-play timer-text-timespan-lg" aria-hidden="true"></span>
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row pt-2">
        <div class="col">
            <TimeLinePanel Items="Items" Logs="Logs"></TimeLinePanel>
        </div>
    </div>
    @if (TimeLog != null)
    {
        <div class="row mt-4">
            <div class="col">
                <div class="btn-group btn-group-toggle mr-4" style="float:left" role="group">
                    <button type="button" class="btn btn-outline-primary @(selectedFilter == TimeLogResultType.Day ? "active" : "")" @onclick="@(() => RequestReportAsync(TimeLogResultType.Day))">Today</button>
                    <button type="button" class="btn btn-outline-primary @(selectedFilter == TimeLogResultType.WeekExcludeToday ? "active" : "")" @onclick="@(() => RequestReportAsync(TimeLogResultType.WeekExcludeToday))">This week</button>
                    <button type="button" class="btn btn-outline-primary @(selectedFilter == TimeLogResultType.AllExcludeThisWeek ? "active" : "")" @onclick="@(() => RequestReportAsync(TimeLogResultType.AllExcludeThisWeek))">More</button>
                </div>
                <div class="pt-2" style="float:left;">
                    <strong class="text-muted pt-2">
                        <span class="oi oi-clock small-timer-button mr-2" aria-hidden="true"></span>
                        @switch (selectedFilter)
                        {
                            case TimeLogResultType.Day:
                                <span>Today @String.Format("{0:F1}", Item.GetTotalHoursSpentTodayTillNow(TimeProvider)) hours</span>
                                break;
                            case TimeLogResultType.WeekExcludeToday:
                                <span>This week @String.Format("{0:F1}", Item.GetTotalHoursSpentThisWeek()) hours</span>
                                break;
                            case TimeLogResultType.AllExcludeThisWeek:
                                <span>Total @String.Format("{0:F1}", Item.GetTotalHoursSpent()) hours</span>
                                break;
                        }
                    </strong>
                </div>
            </div>
        </div>
        <div class="row my-2">
            <div class="col">
                <ul class="p-0 m-0">
                    @foreach (var tl in TimeLog.Items)
                    {
                        <li class="timer-list-item">
                            <TimeLogPanelItemView Item="Item" Log="tl" IsActive="IsActive">
                            </TimeLogPanelItemView>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
    else
    {
        <div>Loading ...</div>
    }
}
else
{
    <div>Loading ...</div>
}

@using System.Timers;

@inject TasksService Service;
@inject ProjectsService PrjService;
@inject ILogProvider LogProvider;
@inject NavigationManager NavigationManager;
@inject NotificationService NotificationServ;
@inject ToolbarService ToolbarServ;
@inject ITimeProvider TimeProvider;

@implements IDisposable

@code {

    [Parameter]
    public string Id { get; set; }

    private TaskItem _item;
    private TaskItem Item { get { return _item; } set { _item = value; Items[0] = _item; } }

    private ModelList<TimeLogItem> TimeLog { get; set; }

    private ModelList<TimeLogItem> _todayTimeLog;
    private ModelList<TimeLogItem> TodayTimeLog { get { return _todayTimeLog; } set { _todayTimeLog = value; Logs[0] = _todayTimeLog; } }

    private ProjectItem[] Projects { get; set; }

    private TaskItem[] Items = new TaskItem[1];
    private ModelList<TimeLogItem>[] Logs = new ModelList<TimeLogItem>[1];

    private System.Timers.Timer timer;

    private ILog log;

    private TimeLogResultType selectedFilter { get; set; }

    struct TagMenuItem
    {
        public TagItem tag;
        public bool added;
    }

    private TagMenuItem[] Tags { get; set; }

    private string NewTagLabel { get; set; }

    public bool IsActive
    {
        get
        {
            return Item.IsRunning;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        log = LogProvider.CreateLogger(this);

        using (var scope = log.DebugScope())
        {
            ToolbarServ.Back += OnBack;
            ToolbarServ.Delete += OnDelete;
            ToolbarServ.TitleChanged += OnTitleChanged;

            NotificationServ.DataHasChanged += OnDataHasChanged;

            await RefreshDataAsync();

            SetUpTimer();
        }
    }

    private void OnBack(object value)
    {
        NavigateBack();
    }

    private void OnDelete(object value)
    {
        Remove();
    }

    private async void OnTitleChanged(object value)
    {
        Item = await Service.UpdateTaskTitleAsync(Item, value.ToString());
    }

    private void SetUpTimer()
    {
        timer = new System.Timers.Timer(1000.0);
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    public void Dispose()
    {
        using (var scope = log.DebugScope())
        {
            ToolbarServ.Back -= OnBack;
            ToolbarServ.Delete -= OnDelete;
            ToolbarServ.TitleChanged -= OnTitleChanged;
            ToolbarServ.Update(null);

            NotificationServ.DataHasChanged -= OnDataHasChanged;

            if (timer != null)
            {
                timer.Elapsed -= OnTimedEvent;
                timer.Dispose();
            }
        }
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        StateHasChanged();
    }

    private async void Remove()
    {
        var tempId = Id;
        Id = null;
        if (await Service.RemoveTaskAsync(Item))
        {
            NavigateBack();
        }
        else
        {
            Id = tempId;
        }
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        using (var scope = log.DebugScope())
        {
            RefreshDataAsync();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private void NavigateToProject(string id)
    {
        NavigationManager.NavigateTo($"projects/{id}");
    }

    private async Task<bool> RefreshDataAsync()
    {
        using (var scope = log.DebugScope())
        {
            NewTagLabel = "";
            if (!String.IsNullOrEmpty(Id))
            {
                Projects = await PrjService.GetProjectsAsync(false);
                Item = await Service.GetTaskAsync(Id);
                if (Item != null)
                {
                    ToolbarServ.Update(Item.Title);

                    TodayTimeLog = TimeLog = await Service.GetTimeLogItemsAsync(Item, TimeLogResultType.Day);

                    await RefreshTagsAsync();
                }
                else
                {
                    scope.E($"Cannot find task {Id}");
                    return false;
                }
            }
        }
        StateHasChanged();

        return true;
    }

    private async Task<bool> RefreshTagsAsync()
    {
        var alltags = await Service.GetAllTagsAsync();
        var itemtags = await Service.GetTagsAsync(Item);
        Tags = (from tg in alltags
                join it in itemtags on tg.Id equals it.Id
                into tgt
                from res in tgt.DefaultIfEmpty()
                select new TagMenuItem { tag = tg, added = res != null }).ToArray();

        return true;
    }

    private async void AddProjectByIdAsync(string id)
    {
        Item = await Service.UpdateProjectAsync(Item, id);
        StateHasChanged();
    }

    private async void ClearProject()
    {
        Item.Project = null;
        Item = await Service.UpdateProjectAsync(Item, null);
        StateHasChanged();
    }


    private void Start()
    {
        Service.StartTaskAsync(Item);
    }

    private void Stop()
    {
        Service.StopTaskAsync(Item);
    }

    private async void AddTagAsync()
    {
        await Service.AddOrCreateTagAsync(Item, NewTagLabel);
    }

    private async void AddTagByIdAsync(string id)
    {
        await Service.AddTagAsync(Item, id);
        await RefreshTagsAsync();
        StateHasChanged();
    }

    private async void RemoveTagByIdAsync(string id)
    {
        await Service.RemoveTagAsync(Item, id);
        await RefreshTagsAsync();
        StateHasChanged();
    }

    private async void RequestReportAsync(TimeLogResultType filter)
    {
        TimeLog = null;
        StateHasChanged();
        selectedFilter = filter;
        TimeLog = await Service.GetTimeLogItemsAsync(Item, filter);
        StateHasChanged();
    }
}
