@page "/task/{id}"

@if (Item != null)
{
    @if (Item.IsRunning)
    {
        <PageTitle Value="@FormatingUtils.GetTimerTitle(Item, TimeProvider)" />
    }
    <div class="row">
        <div class="col">
            @if (Item.Project == null)
            {
                <button class="btn btn-primary btn-sm" data-toggle="dropdown">
                    Add Project
                </button>
            }
            else
            {
                <button class="btn btn-primary btn-sm" data-toggle="dropdown" title="Change project">
                    @Item.Project.Title
                </button>
            }
            <div class="dropdown-menu">
                @if (Projects != null && Projects.Length > 0)
                {
                    <ul>
                        @foreach (var project in Projects)
                        {
                            <li>
                                <button class="btn btn-default" @onclick="@(() => AddProjectByIdAsync(project.Id))">
                                    <span class="badge badge-info">@project.Title</span>
                                </button>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
    <div class="row pt-2">
        <div class="col">
            <div class="d-flex flex-row">
                <div class="alert @(Item.IsRunning ? "alert-danger" : "alert-info") container-fluid timer-link" role="document">
                    <div class="d-flex align-items-center">
                        <span class="timer-text timer-text-timespan-lg">
                            @FormatingUtils.FormatTimerElapsedTime(Item, TimeProvider)
                        </span>
                        @if (IsActive)
                        {
                            <button class="btn btn-default ml-2" @onclick="@(() => Stop())">
                                <span class="oi oi-media-pause timer-text-timespan-lg" aria-hidden="true"></span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-default ml-2" @onclick="@(() => Start())">
                                <span class="oi oi-media-play timer-text-timespan-lg" aria-hidden="true"></span>
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-default timer-button" data-toggle="dropdown">
                @if (TagLabels != null && TagLabels.Length > 0)
                {
                    @foreach (var label in TagLabels)
                    {
                        <span class="badge badge-info">@label</span>
                    }
                }
                <span class="badge badge-primary">Add Tag</span>
            </button>
            <div class="dropdown-menu">
                @if (NotAssignedTags != null && NotAssignedTags.Length > 0)
                {
                    <ul>
                        @foreach (var tag in NotAssignedTags)
                        {
                            <li>
                                <button class="btn btn-default timer-button" @onclick="@(() => AddTagByIdAsync(tag.Id))">
                                    <span class="badge badge-info">@tag.Name</span>
                                </button>
                            </li>
                        }
                    </ul>
                }
                <EditForm Model="@NewTagLabel" OnValidSubmit="@(() => AddTagAsync())" class="px-4 py-3">
                    <div class="form-group">
                        <label class="form-check-label" for="newTagEdit">
                            New tag
                        </label>
                        <InputText @bind-Value="@NewTagLabel" class="form-control" placeholder="tag name" id="newTagEdit"></InputText>
                    </div>
                    <button type="submit" class="btn btn-primary">Add</button>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <ul class="list-group list-group-horizontal">
                <li class="p-2">
                    <img src="/img/today.svg" width="32" height="32" alt="Today" title="Today" />
                    <span><strong>@String.Format("{0:F1}", Item.GetTotalHoursSpentTodayTillNow(TimeProvider))</strong> <small>hour(s)</small></span>
                </li>
                <li class="p-2">
                    <img src="/img/week.svg" width="32" height="32" alt="This Week" title="This Week" />
                    <span><strong>@String.Format("{0:F1}", Item.GetTotalHoursSpentThisWeek())</strong> <small>hour(s)</small></span>
                </li>
                <li class="p-2">
                    <img src="/img/total.svg" width="32" height="32" alt="Total" title="Total" />
                    <span><strong>@String.Format("{0:F1}", Item.GetTotalHoursSpent())</strong> <small>hour(s)</small></span>
                </li>
            </ul>
        </div>
    </div>
    @if (TimeLog != null)
    {
        <div class="row pt-2">
            <div class="col">
                <h4>Time log</h4>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <h5>This week (@TimeLog.Count):</h5>
                <ul class="px-0 py-2 m-0">
                    @foreach (var tl in TimeLog.Items)
                    {
                        <li class="timer-list-item">
                            <TimeLogPanelItemView Item="Item" Log="tl" IsActive="IsActive">
                            </TimeLogPanelItemView>
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <a href="#">All records (@TimeLog.TotalCount)</a>
            </div>
        </div>
    }
    else
    {
        <div>Loading ...</div>
    }
}
else
{
    <div>Loading ...</div>
}

@using System.Timers;

@inject TasksService Service;
@inject ProjectsService PrjService;
@inject ILogProvider LogProvider;
@inject NavigationManager NavigationManager;
@inject NotificationService NotificationServ;
@inject ToolbarService ToolbarServ;
@inject ITimeProvider TimeProvider;

@implements IDisposable

@code {
    [Parameter]
    public string Id { get; set; }

    private TaskItem Item { get; set; }
    private ModelList<TimeLogItem> TimeLog { get; set; }
    private ProjectItem[] Projects { get; set; }

    private System.Timers.Timer timer;

    private ILog log;

    //tags begin
    private TagItem[] Tags { get; set; }

    private TagItem[] NotAssignedTags { get; set; }

    private string[] TagLabels
    {
        get
        {
            //TODO: run only once and cache, optimize
            var result = new List<string>();
            if (Tags == null) return null;
            for (int i = 0; i < Tags.Length; i++)
            {
                result.Add(Tags[i].Name);
            }
            return result.ToArray();
        }
    }

    private string NewTagLabel { get; set; }

    //tags end

    public bool IsActive
    {
        get
        {
            return Item.IsRunning;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        log = LogProvider.CreateLogger(this);

        using (var scope = log.DebugScope())
        {
            ToolbarServ.Back += OnBack;
            ToolbarServ.Delete += OnDelete;
            ToolbarServ.TitleChanged += OnTitleChanged;

            NotificationServ.DataHasChanged += OnDataHasChanged;

            await RefreshDataAsync();

            SetUpTimer();
        }
    }

    private void OnBack(object value)
    {
        NavigateBack();
    }

    private void OnDelete(object value)
    {
        Remove();
    }

    private async void OnTitleChanged(object value)
    {
        Item = await Service.UpdateTaskTitleAsync(Item, value.ToString());
    }

    private void SetUpTimer()
    {
        timer = new System.Timers.Timer(1000.0);
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    public void Dispose()
    {
        using (var scope = log.DebugScope())
        {
            ToolbarServ.Back -= OnBack;
            ToolbarServ.Delete -= OnDelete;
            ToolbarServ.TitleChanged -= OnTitleChanged;
            ToolbarServ.Update(null);

            NotificationServ.DataHasChanged -= OnDataHasChanged;

            if (timer != null)
            {
                timer.Elapsed -= OnTimedEvent;
                timer.Dispose();
            }
        }
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        StateHasChanged();
    }

    private async void Remove()
    {
        var tempId = Id;
        Id = null;
        if (await Service.RemoveTaskAsync(Item))
        {
            NavigateBack();
        }
        else
        {
            Id = tempId;
        }
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        using (var scope = log.DebugScope())
        {
            RefreshDataAsync();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task<bool> RefreshDataAsync()
    {
        using (var scope = log.DebugScope())
        {
            NewTagLabel = "";
            if (!String.IsNullOrEmpty(Id))
            {
                Item = await Service.GetTaskAsync(Id);
                if (Item != null)
                {
                    ToolbarServ.Update(Item.Title);

                    TimeLog = await Service.GetTimeLogItemsAsync(Item, TimeLogResultType.Week);

                    Projects = await PrjService.GetProjectsAsync(false);

                    Tags = await Service.GetTagsAsync(Item);
                    NotAssignedTags = await Service.GetNotAssignedTagsAsync(Tags);
                }
                else
                {
                    scope.E($"Cannot find task {Id}");
                    return false;
                }
            }
        }
        StateHasChanged();

        return true;
    }

    private async void AddProjectByIdAsync(string id)
    {
        Item = await Service.UpdateProjectAsync(Item, id);
        StateHasChanged();
    }


    private void Start()
    {
        Service.StartTaskAsync(Item);
    }

    private void Stop()
    {
        Service.StopTaskAsync(Item);
    }

    private async void AddTagAsync()
    {
        log.D("ApplyChanges");

        await Service.AddOrCreateTagAsync(Item, NewTagLabel);
        //await RefreshDataAsync();
    }

    private async void AddTagByIdAsync(string id)
    {
        log.D("ApplyChanges");

        await Service.AddTagAsync(Item, id);
        //await RefreshDataAsync();
    }

}
