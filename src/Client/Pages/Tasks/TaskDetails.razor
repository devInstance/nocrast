@page "/task/{id}"

@if (Item != null)
{
    @if (Item.Project == null)
    {
        <button class="btn btn-default" data-toggle="dropdown">
            <span class="oi oi-plus" aria-hidden="true"></span> Project
        </button>
    }
    else
    {
        <span><strong>@Item.Project.Title</strong></span>
        <button class="btn btn-default" data-toggle="dropdown">
            Change Project
        </button>
    }
    <div class="dropdown-menu">
        @if (Projects != null && Projects.Length > 0)
        {
            <ul>
                @foreach (var project in Projects)
                {
                    <li><button class="btn btn-default timer-button" @onclick="@(() => AddProjectByIdAsync(project.Id))"><span class="badge badge-info">@project.Title</span></button></li>
                }
            </ul>
        }
    </div>
    <ul class="timer-list">
        <TaskView Item="Item" ShowNavigationButton="false" />
        <li><span class="timer-text">@String.Format("This Week: {0:F1}", Item.GetTotalHoursSpentThisWeek()) hour(s)</span></li>
        <li><span class="timer-text">@String.Format("Total: {0:F1}", Item.GetTotalHoursSpent()) hour(s)</span></li>
    </ul>
    @if (TimeLog != null)
    {
        <ul class="timer-list">
            @foreach (var tl in TimeLog)
            {
                <li class="timer-list-item">
                    <TimeLogPanelItemView Item="Item" Log="tl" IsActive="IsActive">
                    </TimeLogPanelItemView>
                </li>
            }
        </ul>
    }
    else
    {
        <div>Loading ...</div>
    }
}
else
{
    <div>Loading ...</div>
}

@using System.Timers;

@inject TasksService Service;
@inject ProjectsService PrjService;
@inject ILogProvider LogProvider;
@inject NavigationManager NavigationManager;
@inject NotificationService NotificationServ;
@inject ToolbarService ToolbarServ

@implements IDisposable

@code {
    [Parameter]
    public string Id { get; set; }

    private TaskItem Item { get; set; }
    private List<TimeLogItem> TimeLog { get; set; }
    private ProjectItem[] Projects { get; set; }

    private System.Timers.Timer timer;

    private ILog log;

    public bool IsActive
    {
        get
        {
            return Item.IsRunning;
        }
    }

    string ErrorText { get; set; }

    protected async override Task OnInitializedAsync()
    {
        log = LogProvider.CreateLogger(this);

        using (var scope = log.DebugScope())
        {
            ToolbarServ.Back += OnBack;
            ToolbarServ.Delete += OnDelete;

            NotificationServ.DataHasChanged += OnDataHasChanged;

            await RefreshData();

            SetUpTimer();
        }
    }

    private void OnBack(object e, EventArgs a)
    {
        NavigateBack();
    }

    private void OnDelete(object e, EventArgs a)
    {
        Remove();
    }

    private void SetUpTimer()
    {
        timer = new System.Timers.Timer(1000.0);
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    public void Dispose()
    {
        using (var scope = log.DebugScope())
        {
            ToolbarServ.Back -= OnBack;
            ToolbarServ.Delete -= OnDelete;
            ToolbarServ.Update(null);

            NotificationServ.DataHasChanged -= OnDataHasChanged;

            if (timer != null)
            {
                timer.Elapsed -= OnTimedEvent;
                timer.Dispose();
            }
        }
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        StateHasChanged();
    }

    private async void Remove()
    {
        var tempId = Id;
        Id = null;
        if (await Service.RemoveTaskAsync(Item))
        {
            NavigateBack();
        }
        else
        {
            Id = tempId;
        }
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        using (var scope = log.DebugScope())
        {
            RefreshData();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task<bool> RefreshData()
    {
        using (var scope = log.DebugScope())
        {
            if (!String.IsNullOrEmpty(Id))
            {
                Item = await Service.GetTaskAsync(Id);
                if (Item != null)
                {
                    ToolbarServ.Update(Item.Title);

                    TimeLog = await Service.GetTimeLogItemsAsync(Item);

                    Projects = await PrjService.GetProjectsAsync();
                }
                else
                {
                    scope.E($"Cannot find task {Id}");
                    return false;
                }
            }
        }
        StateHasChanged();

        return true;
    }

    private async void AddProjectByIdAsync(string id)
    {
        Item = await Service.UpdateProjectAsync(Item, id);
        StateHasChanged();
    }
}
