@page "/tasks"

<PageTitle Value="Tasks" />

@if (TasksList != null)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Time logs</th>
                <th scope="col">Today time logged</th>
                <th scope="col">Week time logged</th>
                <th scope="col">Total time logged</th>
                <th scope="col">Updated</th>
            </tr>
        </thead>
        @foreach (var item in TasksList)
        {
            <tr>
                <td>
                    <NavLink class="nav-link" href="@($"tasks/{item.Id}")">
                        <strong>@item.Title @(item.IsRunning ? "(Running)" : "")</strong>
                    </NavLink>
                </td>
                <td>
                    <NavLink class="nav-link" href="@($"tasks/{item.Id}")">
                        @String.Format("{0:F1}", item.TimeLogCount)
                    </NavLink>
                </td>
                <td>
                    <NavLink class="nav-link" href="@($"tasks/{item.Id}")">
                        @String.Format("{0:F1}", item.TotalTimeSpentToday.ToHours())
                    </NavLink>
                </td>
                <td>
                    <NavLink class="nav-link" href="@($"tasks/{item.Id}")">
                        @String.Format("{0:F1}", item.TotalTimeSpentThisWeek.ToHours())
                    </NavLink>
                </td>
                <td>
                    <NavLink class="nav-link" href="@($"tasks/{item.Id}")">
                        @String.Format("{0:F1}", item.TotalTimeSpent.ToHours())
                    </NavLink>
                </td>
                <td>
                    <NavLink class="nav-link" href="@($"tasks/{item.Id}")">
                        @String.Format("{0:g}", item.UpdateDate.ToLocalTime())
                    </NavLink>
                </td>
            </tr>
        }
    </table>

}
else
{
    <p>Loading ...</p>
}

@using System.Timers;

@inject TasksService Service;
@inject IScopeManager ScopeManager;
@inject NotificationService NotificationServ;
@inject ToolbarService ToolbarServ;
@inject IJSRuntime JSRuntime;

@implements IDisposable;

@code {

    private TaskItem[] TasksList { get; set; }

    private System.Timers.Timer timer;

    private IScopeLog log;

    protected async override Task OnInitializedAsync()
    {
        log = ScopeManager.CreateLogger(this);

        try
        {
            using (var scope = log.DebugExScope())
            {
                SetUpTimer();

                ToolbarServ.EnableAddTask = true;
                ToolbarServ.Update();

                NotificationServ.DataHasChanged += OnDataHasChanged;

                await RefreshData();
            }
        }
        catch (Exception ex)
        {
            log.E(ex);
        }
    }

    private void SetUpTimer()
    {
        timer = new System.Timers.Timer(1000.0);
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    public void Dispose()
    {
        using (var scope = log.DebugExScope())
        {
            ToolbarServ.EnableAddTask = false;
            ToolbarServ.Update();

            if (timer != null)
            {
                timer.Elapsed -= OnTimedEvent;
                timer.Dispose();
            }
        }
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        RefreshData();
    }

    private async Task<bool> RefreshData()
    {
        TasksList = await Service.GetTasksAsync(null, null);
        StateHasChanged();

        return true;
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        log.D("OnTimedEvent");
        StateHasChanged();
    }
}
