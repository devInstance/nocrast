@page "/reports/aggregate"

<PageTitle Value="Aggregate Report"></PageTitle>

<ReportToolbar FilterChanged="(t)=>RequestReportAsync(t)" SelectedType="selectedType" SelectedDate="selectedDate" ViewType="ReportToolbar.ToolbarType.Aggregate"></ReportToolbar>

<div class="p-2">
    <h3>@selectedPeriod</h3>
</div>

<div class="table-responsive p-2">
    @if (Report != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">
                        Task
                    </th>
                    @foreach (var column in Report.Columns)
                    {
                        <th>
                            @switch (selectedType)
                            {
                                case ReportItem.RIType.Daily:
                                    @column.ToString("ddd");
                                    break;
                                case ReportItem.RIType.Weekly:
                                    @column.ToString("MMM d");
                                    break;
                                case ReportItem.RIType.Monthly:
                                    @column.ToString("MMM");
                                    break;
                                default:
                                    @column.ToString()
                                    break;
                            }
                        </th>
                    }
                    <th>
                        Total
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var row in Report.Rows)
                {
                    <tr>
                        <td>
                            @row.Title
                        </td>
                        @foreach (var cell in row.Data)
                        {
                            <td>
                                @String.Format("{0:F1}", cell.Value / (60 * 60 * 1000))
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Loading ...</p>
    }
</div>

@inject ReportService Service;
@inject IScopeManager ScopeManager;
@inject ITimeProvider TimeProvider;

@code {

    private IScopeLog log;

    private ReportItem.RIType selectedType = ReportItem.RIType.Unknown;

    private DateTime selectedDate;
    private DateTime startDate;
    private DateTime endDate;

    private string InputFormat
    {
        get
        {
            switch (selectedType)
            {
                case ReportItem.RIType.Weekly:
                    return "MMM d yyy";
                case ReportItem.RIType.Monthly:
                case ReportItem.RIType.Yearly:
                    return "yyy";
                case ReportItem.RIType.Daily:
                default:
                    return "MMM d yyy";
            }
        }
    }

    private string selectedPeriod = "";

    private ReportItem Report { get; set; }

    protected async override Task OnInitializedAsync()
    {
        log = ScopeManager.CreateLogger(this);
        try
        {
            selectedDate = TimeProvider.CurrentTime;

            using (var scope = log.TraceScope())
            {
                RequestReportAsync(ReportItem.RIType.Daily);
            }
        }
        catch (Exception ex)
        {
            log.E(ex);
        }
    }

    public async void RequestReportAsync(ReportToolbar.FilterChangedArgs args)
    {
        selectedDate = args.Date;
        RequestReportAsync(args.Type);
    }

    public async void RequestReportAsync(ReportItem.RIType type)
    {
        Report = null;
        selectedType = type;
        Report = await Service.GetReportAsync(type, selectedDate.ToUniversalTime());
        if (Report != null)
        {
            startDate = TimeConverter.ConvertToLocal(Report.StartDate, TimeProvider.UtcTimeOffset);
            endDate = TimeConverter.ConvertToLocal(Report.EndDate, TimeProvider.UtcTimeOffset);
            selectedPeriod = $"{startDate.ToString("MMM d yyy")} - {endDate.ToString("MMM d yyy")}";
        }

        StateHasChanged();
    }

}
