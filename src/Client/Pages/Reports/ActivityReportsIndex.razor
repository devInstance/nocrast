@page "/reports/activity"

<PageTitle Value="Report"></PageTitle>
@if (Report != null)
{
    <div class="row pt-2">
        <div class="col">
            <DevInstance.Timelines.Chart IsTimeRangeFlexible="true">
                <Lines>
                    <DevInstance.Timelines.Heatline Data="Lines" TimeInterval="0.25"></DevInstance.Timelines.Heatline>
                </Lines>
            </DevInstance.Timelines.Chart>
        </div>
    </div>
}
else
{
    <p>Loading ...</p>
}

@inject ReportService Service;
@inject IScopeManager ScopeManager;
@inject ITimeProvider TimeProvider;

@using DevInstance.Timelines;

@code {

    string ErrorText { get; set; }

    private IScopeLog log;

    private DateTime selectedDate;
    private DateTime startDate;
    private DateTime endDate;

    private string selectedPeriod = "";

    private ReportItem Report { get; set; }

    private Heatline.Line[] Lines = new Heatline.Line[1];

    protected async override Task OnInitializedAsync()
    {
        log = ScopeManager.CreateLogger(this);
        try
        {
            selectedDate = TimeProvider.CurrentTime;

            using (var scope = log.TraceScope())
            {
                RequestReportAsync(ReportItem.RIType.Daily);
            }
        }
        catch (Exception ex)
        {
            log.E(ex);
        }
    }

    public async void RequestReportAsync(ReportItem.RIType type)
    {
        Report = null;
        Report = await Service.GetActivityReportAsync();

        var items = new Heatline.Item[Report.Rows[0].Data.Length];
        for (int i = 0; i < Report.Rows[0].Data.Length; i++)
        {
            var item = new Heatline.Item
            {
                Time = TimeConverter.ConvertToLocal(Report.Columns[i], TimeProvider.UtcTimeOffset),
                Value = Report.Rows[0].Data[i]
            };
            items[i] = item;
        }

        Lines[0] = new Heatline.Line
        {
            CssClass = "blue",
            Items = items
        };
        StateHasChanged();
    }

}
