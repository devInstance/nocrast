@page "/reports/activity"

<PageTitle Value="Activity Report"></PageTitle>

<ReportToolbar FilterChanged="(t)=>RequestReportAsync(t)" SelectedType="selectedType" SelectedDate="selectedDate" SelectedMode="selectedMode" ViewType="ReportToolbar.ToolbarType.Activity"></ReportToolbar>

<div class="p-2">
    <h3>@selectedPeriod</h3>
</div>

@if (Report != null)
{
    <div class="row pt-2">
        <div class="col">
            <DevInstance.Timelines.Chart IsTimeRangeFlexible="true">
                <Lines>
                    <DevInstance.Timelines.Heatline Data="Lines" TimeInterval="0.25"></DevInstance.Timelines.Heatline>
                </Lines>
            </DevInstance.Timelines.Chart>
        </div>
    </div>
}
else
{
    <p>Loading ...</p>
}

@inject ReportService Service;
@inject IScopeManager ScopeManager;
@inject ITimeProvider TimeProvider;

@using DevInstance.Timelines;

@code {

    string ErrorText { get; set; }

    private IScopeLog log;

    private ReportItem.RIType selectedType = ReportItem.RIType.Total;
    private ReportItem.RIMode selectedMode = ReportItem.RIMode.Combined;

    private DateTime selectedDate;
    private DateTime startDate;
    private DateTime endDate;

    private string selectedPeriod = "";

    private ReportItem Report { get; set; }

    private Heatline.Line[] Lines = new Heatline.Line[1];

    protected async override Task OnInitializedAsync()
    {
        log = ScopeManager.CreateLogger(this);
        try
        {
            selectedDate = TimeProvider.CurrentTime;

            using (var scope = log.TraceScope())
            {
                RequestReportAsync(ReportItem.RIType.Total, ReportItem.RIMode.Combined);
            }
        }
        catch (Exception ex)
        {
            log.E(ex);
        }
    }

    public async void RequestReportAsync(ReportToolbar.FilterChangedArgs args)
    {
        selectedDate = args.Date;
        RequestReportAsync(args.Type, args.Mode);
    }

    public async void RequestReportAsync(ReportItem.RIType type, ReportItem.RIMode mode)
    {
        Report = null;
        Report = await Service.GetActivityReportAsync(type, mode, selectedDate);
        selectedType = type;
        selectedMode = mode;

        Lines = new Heatline.Line[Report.Rows.Length];
        for (int n = 0; n < Lines.Length; n++)
        {
            var data = Report.Rows[n].Data;
            var items = new Heatline.Item[data.Length];
            for (int i = 0; i < items.Length; i++)
            {
                var item = new Heatline.Item
                {
                    Time = Report.Columns[i],
                    Value = data[i].Value,
                    Description = data[i].Details
                };
                items[i] = item;
            }

            Lines[n] = new Heatline.Line
            {
                CssClass = "blue",
                Items = items
            };
        }

        startDate = Report.StartDate;
        endDate = Report.EndDate;

        selectedPeriod = $"{startDate.ToString("MMM d yyy")} - {endDate.ToString("MMM d yyy")}";

        StateHasChanged();
    }

}
