@page "/projects/{id}"

@if (Item != null)
{
    <div class="row">
        <div class="col-1">
            <ColorDropdown Color="@Item.Color" ColorChanged="(color)=>OnSetColor(color)" />
        </div>
        <div class="col">
            @if (!IsEditing)
            {
                <p class="text-muted">
                    @Item.Descritpion
                    <button class="btn btn-default timer-button" @onclick="@(() => StartEditing())">
                        <span class="oi oi-pencil small-timer-button" aria-hidden="true"></span>
                    </button>
                </p>
            }
            else
            {
                <EditForm Model="@DescriptionEditText" OnValidSubmit="@(() => ApplyChangesAsync())">
                    <InputTextArea @bind-Value="@DescriptionEditText" class="form-control"></InputTextArea>
                    <button type="submit" class="btn timer-button text-info">
                        <span class="oi oi-circle-check" aria-hidden="true"></span>
                    </button>
                    <button class="btn timer-button text-danger" @onclick="@(()=>ResetChanges())" @onclick:preventDefault>
                        <span class="oi oi-circle-x" aria-hidden="true"></span>
                    </button>
                </EditForm>
            }
        </div>
    </div>

    @if (Tasks != null)
    {
        <div class="card-deck">
            @foreach (var tl in Tasks)
            {
                <TaskView Item="tl" />
            }
        </div>
    }
    else
    {
        <div>Loading Tasks...</div>
    }
}
else
{
    <div>Loading ...</div>
}

@using System.Timers;

@inject ProjectsService Service;
@inject NotificationService NotificationServ;

@inject IScopeManager ScopeManager;
@inject ITimeProvider TimeProvider;

@inject NavigationManager NavigationManager;
@inject ToolbarService ToolbarServ;

@implements IDisposable

@code {
    [Parameter]
    public string Id { get; set; }

    private ProjectItem Item { get; set; }

    private TaskItem[] Tasks { get; set; }

    private System.Timers.Timer timer;

    private IScopeLog log;

    private bool IsEditing { get; set; }
    private string DescriptionEditText { get; set; }

    protected async override Task OnInitializedAsync()
    {
        log = ScopeManager.CreateLogger(this);

        using (var scope = log.TraceScope())
        {
            ToolbarServ.Back += OnBack;
            ToolbarServ.Delete += OnDelete;
            ToolbarServ.TitleChanged += OnTitleChanged;

            NotificationServ.DataHasChanged += OnDataHasChanged;

            await RefreshData();

            SetUpTimer();
        }
    }

    private void OnBack(object value)
    {
        NavigateBack();
    }

    private void OnDelete(object value)
    {
        Remove();
    }

    private async void OnTitleChanged(object value)
    {
        Item = await Service.UpdateProjectNameAsync(Item, value.ToString());
    }

    private void SetUpTimer()
    {
        timer = new System.Timers.Timer(1000.0);
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    public void Dispose()
    {
        using (var scope = log.TraceScope())
        {
            ToolbarServ.Back -= OnBack;
            ToolbarServ.Delete -= OnDelete;
            ToolbarServ.TitleChanged -= OnTitleChanged;
            ToolbarServ.Update(null);

            NotificationServ.DataHasChanged -= OnDataHasChanged;

            if (timer != null)
            {
                timer.Elapsed -= OnTimedEvent;
                timer.Dispose();
            }
        }
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        StateHasChanged();
    }

    private async void Remove()
    {
        var tempId = Id;
        Id = null;
        if (await Service.RemoveProjectAsync(Item))
        {
            NavigateBack();
        }
        else
        {
            Id = tempId;
        }
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        using (var scope = log.TraceScope())
        {
            RefreshData();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/projects");
    }

    private async Task<bool> RefreshData()
    {
        using (var scope = log.TraceScope())
        {
            if (!String.IsNullOrEmpty(Id))
            {
                Item = await Service.GetProjectAsync(Id);
                if (Item == null)
                {
                    return false;
                }
                ToolbarServ.Update(Item.Title);

                Tasks = await Service.GetTasksAsync(Id);
                if (Tasks == null)
                {
                    return false;
                }
            }
        }
        StateHasChanged();

        return true;
    }

    private void StartEditing()
    {
        DescriptionEditText = Item.Descritpion ?? "";
        IsEditing = true;
    }

    private async void ApplyChangesAsync()
    {
        IsEditing = false;
        log.D("ApplyChanges");

        Item = await Service.UpdateProjectDescriptionAsync(Item, DescriptionEditText);
        StateHasChanged();
    }

    private void ResetChanges()
    {
        IsEditing = false;
        DescriptionEditText = Item.Descritpion;
        log.D("ResetChanges");
    }

    public async void OnSetColor(ProjectColor color)
    {
        Item = await Service.UpdateProjectColorAsync(Item, color);
        StateHasChanged();
    }
}
