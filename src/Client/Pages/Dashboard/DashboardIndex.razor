@page "/"

<PageTitle Value="Dashboard" />
@if (TasksList != null)
{
    <TimerView />

    <h2>Recent Tasks</h2>

    <div class="card-deck">
        <div class="card timer-card">
            <div class="card-body">
                <p class="card-text">
                    New Task
                </p>
                <p class="card-text">
                    <button class="btn btn-default timer-active-button" data-toggle="modal" data-target="#addTaskModal">
                        <span class="oi oi-large oi-play-circle" aria-hidden="true"></span>
                    </button>
                </p>
            </div>
        </div>

        @foreach (var item in TasksList)
        {
            if (!item.IsRunning)
            {
                <TaskView Item="item" />
            }
        }
    </div>
    <NavLink href="/tasks" Match="NavLinkMatch.All">View All ...</NavLink>
}
else
{
    <p>Loading ...</p>
}

@inject TasksService Service;
@inject ILogProvider LogProvider;
@inject NotificationService NotificationServ;
@inject ToolbarService ToolbarServ;
@inject IJSRuntime JSRuntime;

@code {

    private TaskItem[] TasksList { get; set; }

    private ILog log;

    protected async override Task OnInitializedAsync()
    {
        log = LogProvider.CreateLogger(this);

        try
        {
            using (var scope = log.DebugScope())
            {
                NotificationServ.DataHasChanged += OnDataHasChanged;

                await RefreshData();
            }
        }
        catch (Exception ex)
        {
            log.E(ex);
        }
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        RefreshData();
    }

    private async Task<bool> RefreshData()
    {
        TasksList = await Service.GetTasksForDashboardAsync();
        StateHasChanged();

        return true;
    }
}
