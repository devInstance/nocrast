@page "/"

@if (ActiveTasksList != null)
{
    if (ActiveTasksList.Count == 0 || ActiveTasksList.Count > 1)
    {
        <PageTitle Value="Dashboard" />
    }
    else
    {
        <PageTitle Value="@FormatingUtils.GetTimerTitle(ActiveTasksList[0], TimeProvider)" />
    }
    <ActiveTaskPanel ActiveTasksList="ActiveTasksList" Items="Items" TodayTimeLog="TodayTimeLog" />
}
else
{
    <PageTitle Value="Dashboard" />
}

@if (PassiveTasksList != null)
{
    <h2 class="mt-4">Recent Tasks</h2>

    <div class="card-deck">
        <div class="card timer-card">
            <div class="card-body">
                <p class="card-text">
                    New Task
                </p>
                <p class="card-text">
                    <button class="btn btn-default timer-active-button" data-toggle="modal" data-target="#addTaskModal">
                        <span class="oi oi-large oi-play-circle" aria-hidden="true"></span>
                    </button>
                </p>
            </div>
        </div>

        @foreach (var item in PassiveTasksList)
        {
            if (!item.IsRunning)
            {
                <TaskView Item="item" />
            }
        }
    </div>
    <NavLink href="/tasks" Match="NavLinkMatch.All">View All ...</NavLink>
}
else
{
    <p>Loading ...</p>
}

@using System.Timers;

@inject TasksService Service;
@inject ILogProvider LogProvider;
@inject NotificationService NotificationServ;
@inject ToolbarService ToolbarServ;
@inject IJSRuntime JSRuntime;
@inject ITimeProvider TimeProvider;

@implements IDisposable;

@code {

    private List<TaskItem> ActiveTasksList { get; set; }
    private List<TaskItem> PassiveTasksList { get; set; }
    private TaskItem[] Items { get; set; }
    private ModelList<TimeLogItem>[] TodayTimeLog { get; set; }

    private ILog log;

    private Timer timer;

    protected async override Task OnInitializedAsync()
    {
        log = LogProvider.CreateLogger(this);

        try
        {
            ActiveTasksList = new List<TaskItem>();
            PassiveTasksList = new List<TaskItem>();

            using (var scope = log.DebugExScope())
            {
                SetUpTimer();

                NotificationServ.DataHasChanged += OnDataHasChanged;

                await RefreshData();
            }
        }
        catch (Exception ex)
        {
            log.E(ex);
        }
    }

    private void SetUpTimer()
    {
        timer = new Timer(1000.0);
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        log.D("OnTimedEvent");
        StateHasChanged();
    }

    public void Dispose()
    {
        using (var scope = log.DebugExScope())
        {
            if (timer != null)
            {
                timer.Elapsed -= OnTimedEvent;
                timer.Dispose();
            }
        }
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        RefreshData();
    }

    private async Task<bool> RefreshData()
    {

        using (var l = log.DebugExScope())
        {
            var activeTasks = await Service.GetRunningTasksAsync();
            if(activeTasks != null)
            {
                ActiveTasksList.Clear();
                ActiveTasksList.AddRange(activeTasks);
            }

            var passiveTasks = await Service.GetTasksForDashboardAsync();
            if(passiveTasks != null)
            {
                PassiveTasksList.Clear();
                PassiveTasksList.AddRange(passiveTasks);
            }
            if(ActiveTasksList != null && ActiveTasksList.Count == 0 && PassiveTasksList != null && PassiveTasksList.Count > 0)
            {
                // keep last active
                ActiveTasksList.Add(PassiveTasksList[0]);
                PassiveTasksList.RemoveAt(0);
            }

            Items = await Service.GetTodayTasksAsync();
            l.D($"Items = {Items}");
            if (Items != null)
            {
                l.D($"Length = {Items.Length}");
                TodayTimeLog = new ModelList<TimeLogItem>[Items.Length];
                for (int i = 0; i < Items.Length; i++)
                {
                    l.D($"i = {i}");
                    TodayTimeLog[i] = await Service.GetTimeLogItemsAsync(Items[i], TimeLogResultType.Day, null, null);
                }
            }
            StateHasChanged();

            return true;
        }
    }
}
