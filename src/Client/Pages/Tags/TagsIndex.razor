@page "/tags"

<PageTitle Value="Tags" />

@if (Tags != null)
{
    <ul>
        @foreach (var item in Tags)
        {
            <li>
                <NavLink class="nav-link" href="@($"tags/{item.Id}")">
                    <span class="badge badge-info">
                        @item.Name
                    </span>
                </NavLink>
            </li>
        }
    </ul>
}
else
{
    <p>Loading ...</p>
}

@inject TagsService Service;
@inject NotificationService NotificationServ;
@inject ILogProvider LogProvider;
@inject ITimeProvider TimeProvider;
@inject ToolbarService ToolbarServ;

@implements IDisposable

@code {

    private ILog log;

    private TagItem[] Tags;

    protected async override Task OnInitializedAsync()
    {
        log = LogProvider.CreateLogger(this);
        try
        {
            using (var scope = log.DebugScope())
            {
                ToolbarServ.EnableAddTag = true;
                ToolbarServ.Update();

                NotificationServ.DataHasChanged += OnDataHasChanged;

                await RefreshData();
            }
        }
        catch (Exception ex)
        {
            log.E(ex);
        }
    }

    public void Dispose()
    {
        ToolbarServ.EnableAddTag = false;
        ToolbarServ.Update();
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        RefreshData();
    }

    private async Task<bool> RefreshData()
    {
        Tags = await Service.GetTagsAsync();
        StateHasChanged();

        return true;
    }

}
