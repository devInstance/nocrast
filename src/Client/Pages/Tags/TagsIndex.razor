@page "/tags"

<PageTitle Value="Tags" />

@if (Tags != null)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Tasks</th>
                <th scope="col">Total time logged</th>
            </tr>
        </thead>
        @foreach (var item in Tags)
        {
            <tr>
                <td>
                    <NavLink class="nav-link" href="@($"tags/{item.Id}")">
                        <strong>@item.Name</strong>
                    </NavLink>
                </td>
                <td>
                    <NavLink class="nav-link" href="@($"tags/{item.Id}")">
                        @item.TasksCount
                    </NavLink>
                </td>
                <td>
                    <NavLink class="nav-link" href="@($"tags/{item.Id}")">
                        @String.Format("{0:F1}", item.TotalTimeSpent.ToHours())
                    </NavLink>
                </td>
            </tr>
        }
    </table>
}
else
{
    <p>Loading ...</p>
}

@inject TagsService Service;
@inject NotificationService NotificationServ;
@inject IScopeManager ScopeManager;
@inject ITimeProvider TimeProvider;
@inject ToolbarService ToolbarServ;

@implements IDisposable

@code {

    private IScopeLog log;

    private TagItem[] Tags;

    protected async override Task OnInitializedAsync()
    {
        log = ScopeManager.CreateLogger(this);
        try
        {
            using (var scope = log.TraceScope())
            {
                ToolbarServ.EnableAddTag = true;
                ToolbarServ.Update();

                NotificationServ.DataHasChanged += OnDataHasChanged;

                await RefreshData();
            }
        }
        catch (Exception ex)
        {
            log.E(ex);
        }
    }

    public void Dispose()
    {
        ToolbarServ.EnableAddTag = false;
        ToolbarServ.Update();
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        RefreshData();
    }

    private async Task<bool> RefreshData()
    {
        Tags = await Service.GetTagsAsync();
        StateHasChanged();

        return true;
    }

    private void StartEditing()
    {
        //TitleEditText = Item.Title;
        //IsEditing = true;
    }

}
