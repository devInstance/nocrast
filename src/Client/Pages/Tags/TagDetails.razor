@page "/tags/{id}"

@if (Item != null)
{

    @if (Tasks != null)
    {
        <div class="card-deck">
            @foreach (var tl in Tasks)
            {
                <TaskView Item="tl" />
            }
        </div>
    }
    else
    {
        <div>Loading Tasks...</div>
    }
}
else
{
    <div>Loading ...</div>
}

@using System.Timers;

@inject TagsService Service;
@inject NotificationService NotificationServ;

@inject ILogProvider LogProvider;
@inject ITimeProvider TimeProvider;

@inject NavigationManager NavigationManager
@inject ToolbarService ToolbarServ

@implements IDisposable

@code {
    [Parameter]
    public string Id { get; set; }

    private TagItem Item { get; set; }

    private TaskItem[] Tasks { get; set; }

    private System.Timers.Timer timer;

    private ILog log;

    protected async override Task OnInitializedAsync()
    {
        log = LogProvider.CreateLogger(this);

        using (var scope = log.DebugExScope())
        {
            ToolbarServ.Back += OnBack;
            ToolbarServ.Delete += OnDelete;
            ToolbarServ.TitleChanged += OnTitleChanged;

            NotificationServ.DataHasChanged += OnDataHasChanged;

            await RefreshData();

            SetUpTimer();
        }
    }

    private void OnBack(object value)
    {
        NavigateBack();
    }

    private void OnDelete(object value)
    {
        Remove();
    }

    private async void OnTitleChanged(object value)
    {
        Item = await Service.UpdateTagNameAsync(Item, value.ToString());
    }

    private void SetUpTimer()
    {
        timer = new System.Timers.Timer(1000.0);
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    public void Dispose()
    {
        using (var scope = log.DebugExScope())
        {
            ToolbarServ.Back -= OnBack;
            ToolbarServ.Delete -= OnDelete;
            ToolbarServ.TitleChanged -= OnTitleChanged;
            ToolbarServ.Update(null);

            NotificationServ.DataHasChanged -= OnDataHasChanged;

            if (timer != null)
            {
                timer.Elapsed -= OnTimedEvent;
                timer.Dispose();
            }
        }
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        StateHasChanged();
    }

    private async void Remove()
    {
        var tempId = Id;
        Id = null;
        if (await Service.RemoveTagAsync(Item))
        {
            NavigateBack();
        }
        else
        {
            Id = tempId;
        }
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        using (var scope = log.DebugExScope())
        {
            RefreshData();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/tags");
    }

    private async Task<bool> RefreshData()
    {
        using (var scope = log.DebugExScope())
        {
            if (!String.IsNullOrEmpty(Id))
            {
                Item = await Service.GetTagAsync(Id);
                if (Item == null)
                {
                    return false;
                }

                ToolbarServ.Update(Item.Name);

                Tasks = await Service.GetTasksAsync(Id);
                if (Tasks == null)
                {
                    return false;
                }
            }
        }
        StateHasChanged();

        return true;
    }
}
