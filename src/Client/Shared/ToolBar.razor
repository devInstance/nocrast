<div class="px-3 pt-3 pb-1">
    @if (IsBack)
    {
        <button type="button" class="btn mr-auto" @onclick="OnBack">
            <span class="oi oi-chevron-left" aria-hidden="true"></span>
        </button>
    }
    @if (!String.IsNullOrEmpty(Title))
    {
        <h2 class="mr-1">@ToolbarServ.Title</h2>
    }
    @if (ToolbarServ.EnableAddProject)
    {
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addProjectModal" title="New project">
            New Project
        </button>
    }
    @if (ToolbarServ.EnableAddTag)
    {
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addTagModal" title="New tag">
            New Tag
        </button>
    }
    @if (ToolbarServ.EnableAddTask)
    {
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addTaskModal" title="New timer">
            New Timer
        </button>
    }
</div>

@inject NotificationService NotificationServ;
@inject ToolbarService ToolbarServ;
@inject ILogProvider LogProvider;

@code {

    string Title { get; set; }
    bool IsBack { get; set; }

    private ILog log;

    protected async override Task OnInitializedAsync()
    {
        log = LogProvider.CreateLogger(this);
        using (var l = log.DebugScope())
        {
            ToolbarServ.ToolbarHasChanged += OnChange;
            OnChange(null, null);
        }
    }

    private void OnChange(Object sender, EventArgs e)
    {
        using (var l = log.DebugScope())
        {
            StateHasChanged();
        }
    }

    private void OnBack()
    {
        using (var l = log.DebugScope())
        {
            ToolbarServ.InvokeBack();
        }
    }
}
