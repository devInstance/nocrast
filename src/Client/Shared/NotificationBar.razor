@if (!String.IsNullOrEmpty(ErrorText))
{
    <div class="notification-container">
        <div class="p-1">
            <div class="alert alert-danger alert-dismissible fade show notification-container-alert" role="alert">
                @ErrorText
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>
    </div>
}

@inject NotificationService NotificationServ;
@inject IScopeManager ScopeManager;

@code {

    string ErrorText { get; set; }

    private IScopeLog log;

    protected async override Task OnInitializedAsync()
    {
        log = ScopeManager.CreateLogger(this);
        using (var l = log.DebugExScope())
        {
            NotificationServ.ErrorHasOccured += OnError;
        }
    }

    private void OnError(Object sender, ServiceErrorEventArgs e)
    {
        using (var l = log.DebugExScope())
        {
            l.E(e.Message);
            if (e.IsNetworkError)
            {
                ErrorText = $"Error connecting to the server {e.Message}";
            }
            else if (e.IsUIError)
            {
                ErrorText = e.Message;
            }
            else
            {
                ErrorText = "";
            }
            StateHasChanged();
        }
    }
}
