
@inject TasksService Service;
@inject ITimeProvider TimeProvider;

@using NoCrast.Client.ModelExtensions;

<div class="@(IsActive ? "timer-active-item-timelog-panel" : "timer-item-timelog-panel")">

    @if (IsTimeLogShown)
    {
        <span class="timer-text left-column">@String.Format("This Week: {0:F1}", Item.TotalHoursSpentThisWeek) hour(s)</span>
        <span class="timer-text left-column">@String.Format("Total: {0:F1}", Item.TotalHoursSpent) hour(s)</span>
        @if (TimeLog != null)
        {
            <ul class="timer-list">
                @foreach (var tl in TimeLog)
                {
                    <li class="timer-list-item">
                        <TimeLogPanelItemView Item="Item" Log="tl" IsActive="IsActive">
                        </TimeLogPanelItemView>
                    </li>
                }
                <li class="timer-list-item">
                    <NavLink href="@($"task/{Item.Task.Id}")" Match="NavLinkMatch.All">
                        <strong>More ...</strong>
                    </NavLink>
                </li>
            </ul>
        }
        else
        {
            <div>Loading ...</div>
        }
    }
    <div class="@(IsActive ? "timer-item-timelog-panel-button-container color-panel-active" : "timer-item-timelog-panel-button-container color-panel")">
        <button class="btn btn-default timer-button" @onclick="@(() => ToggleLogPanel())">
            @if (IsTimeLogShown)
            {
                <span class="oi oi-chevron-top small-timer-button" aria-hidden="true"></span>
            }
            else
            {
                <span class="oi oi-chevron-bottom small-timer-button" aria-hidden="true"></span>
            }
        </button>
    </div>
</div>

@code {
    [Parameter]
    public TaskItemView Item { get; set; }

    public List<TimeLogItem> TimeLog { get; set; }
    public bool IsTimeLogShown { get; set; }

    public bool IsActive
    {
        get
        {
            return Item.Task.IsRunning;
        }
    }

    protected override void OnInitialized()
    {
        Service.DataHasChanged += OnDataHasChanged;
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        if (IsTimeLogShown)
        {
            TimeLog = Service.GetTimeLogItemsAsync(Item, 5).Result;
        }
        StateHasChanged();
    }

    private async void ToggleLogPanel()
    {
        if (!IsTimeLogShown)
        {
            IsTimeLogShown = true;
            TimeLog = await Service.GetTimeLogItemsAsync(Item, 5);
        }
        else
        {
            IsTimeLogShown = false;
        }
    }
}
