@if (TimeScaleLabel != null)
{
    @foreach (var item in TimeScaleLabel)
    {
        <div class="@(item.cssClass)" style="@(item.divStyle)"><small>@(item.labelText)</small></div>
    }
    <div>
        <svg class="chart" width="100%" style="z-index:-1;" height="@(svgHeight)" role="img">
            @foreach (var item in TimeScale)
            {
                <line x1="@(item.lineonex)" y1="0" x2="@(item.lineonex)" y2="@(item.lineoney)" stroke="grey"></line>
                <line x1="@(item.linetwox)" y1="0" x2="@(item.linetwox)" y2="@(item.linetwoy)" stroke="grey"></line>
            }
            @foreach (var bar in TimeBars)
            {
                <g class="@(bar.cssClass)">
                    <rect x="@(bar.x)"
                          y="@(bar.y)"
                          width="@(bar.width)"
                          height="@(bar.height)">
                        <title>@(bar.labeltooltip)</title>
                    </rect>
                </g>
                @if (!string.IsNullOrEmpty(bar.label))
                {
                    <g class="bar">
                        <text x="@(bar.labelx)"
                              y="@(bar.labely)">
                            @(bar.label)
                        </text>
                    </g>
                }
            }
        </svg>
    </div>
}

@inject TasksService Service;
@inject NotificationService NotificationServ;
@inject ITimeProvider TimeProvider;
@inject ILogProvider LogProvider;

@code {
    [Parameter]
    public TaskItem[] Items { get; set; }
    [Parameter]
    public ModelList<TimeLogItem>[] Logs { get; set; }

    struct TimeScaleLabelItem
    {
        public string cssClass;
        public string divStyle;
        public string labelText;
    }

    struct TimeScaleItem
    {
        public string lineonex;
        public string lineoney;

        public string linetwox;
        public string linetwoy;
    }

    struct TimeBar
    {
        public string cssClass;
        public string x;
        public string y;
        public string width;
        public string height;
        public string label;
        public string labelx;
        public string labely;
        public string labeltooltip;
    }

    private DateTime StartDate { get; set; }
    private DateTime EndDate { get; set; }
    private float CellWidthPercent { get; set; }

    private TimeScaleLabelItem[] TimeScaleLabel;
    private TimeScaleItem[] TimeScale;
    private TimeBar[] TimeBars;

    private int svgHeight;

    private ILog log;

    private void InitializeTimeScale()
    {
        using (var l = log.DebugExScope())
        {
            var labels = new List<TimeScaleLabelItem>();
            for (DateTime time = StartDate; time.Hour <= EndDate.Hour; time = time.AddHours(1))
            {
                var item = new TimeScaleLabelItem();

                item.cssClass = time.Hour % 2 == 1 ? "odd-label" : "even-label";
                item.labelText = time.ToString("hhtt").ToLower();

                if (time == StartDate || time.Hour == EndDate.Hour - 1)
                {
                    item.divStyle = $"max-width:{CellWidthPercent - 1}%;width:{CellWidthPercent - 1}%";
                }
                else if (time.Hour == EndDate.Hour)
                {
                    item.divStyle = $"max-width:1%;width:1%";
                }
                else
                {
                    item.divStyle = $"max-width:{CellWidthPercent}%;width:{CellWidthPercent}%";
                }
                labels.Add(item);
            }
            TimeScaleLabel = labels.ToArray();

            var items = new List<TimeScaleItem>();
            @for (int i = 0, count = EndDate.Hour - StartDate.Hour; i < count; i++)
            {
                var item = new TimeScaleItem
                {
                    lineonex = $"{i * CellWidthPercent}%",
                    lineoney = "16",
                    linetwox = $"{i * CellWidthPercent + CellWidthPercent / 2}%",
                    linetwoy = "8"
                };
                items.Add(item);
            }

            TimeScale = items.ToArray();

            if (Items != null)
            {
                svgHeight = Items.Length * 36 + 10;
            }
            else
            {
                svgHeight = 46;
            }
        }
    }

    private void InitializeTimeBars()
    {
        var bars = new List<TimeBar>();

        @if (Items != null && Logs != null && Logs.Length == Items.Length)
        {
            @for (int n = 0; n < Items.Length; n++)
            {
                @if (Logs[n] != null)
                {
                    var task = Items[n];
                    @foreach (var tl in Logs[n].Items)
                    {
                        float x = ((tl.StartTime.ToLocalTime().Hour + (tl.StartTime.ToLocalTime().Minute / 60.0f) - (float)StartDate.Hour) * CellWidthPercent);
                        int y = n * 36 + 10;
                        float width = ((float)tl.GetElapsedThisPeriod(TimeProvider) / 1000.0f / 60.0f / 60.0f * CellWidthPercent);
                        int height = 26;
                        var item = new TimeBar
                        {
                            cssClass = "bar " + (Items[n].Project != null ? Items[n].Project.Color.ToString().ToLower() : "white"),
                            x = $"{x}%",
                            y = $"{y}",
                            width = $"{width}%",
                            height = $"{height}",
                            labelx = $"{x + 0.25}%",
                            labely = $"{y + 18}"
                        };

                        if (width > 3.0)
                        {
                            //if (task.IsRunning && task.ActiveTimeLogItem.Id == tl.Id)
                            //{
                            //    item.label = String.Format("{0:F1} hrs", task.GetTotalHoursSpentTodayTillNow(TimeProvider));
                            //}
                            //else
                            //{
                            // item.label = String.Format("{0:F1}", tl.GetElapsedThisPeriodHours(TimeProvider));
                            //}
                        }
                        var tm = tl.GetElapsedTimeSpan(TimeProvider);
                        if (tm.Hours > 0)
                        {
                            item.labeltooltip = String.Format("{0}: {1:hh} hours and {1:%m} minutes", task.Title, tl.GetElapsedTimeSpan(TimeProvider));
                        }
                        else
                        {
                            item.labeltooltip = String.Format("{0}: {1:%m} minutes", task.Title, tl.GetElapsedTimeSpan(TimeProvider));
                        }
                        bars.Add(item);
                    }
                }
            }
        }

        TimeBars = bars.ToArray();
    }

    protected override void OnInitialized()
    {
        log = LogProvider.CreateLogger(this);
        using (var l = log.DebugExScope())
        {
            DateTime now = DateTime.Now;

            StartDate = DateTime.Today;

            if (now.Hour < 8)
            {
                if (now.Hour > 1)
                {
                    StartDate = DateTime.Today.AddHours(now.Hour - 1);
                }
            }
            else
            {
                StartDate = DateTime.Today.AddHours(8);
            }

            if (now.Hour >= 20)
            {
                if (now.Hour < 23)
                {
                    EndDate = DateTime.Today.AddHours(now.Hour + 1);
                }
                else
                {
                    EndDate = DateTime.Today.AddHours(now.Hour);
                }
            }
            else
            {
                EndDate = DateTime.Today.AddHours(20);
            }

            CellWidthPercent = 100.0f / (EndDate.Hour - StartDate.Hour);

            InitializeTimeScale();
            InitializeTimeBars();
            NotificationServ.DataHasChanged += OnDataHasChanged;
            StateHasChanged();
        }
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        using (var l = log.DebugExScope())
        {
            InitializeTimeScale();
            InitializeTimeBars();
            StateHasChanged();
        }
    }

    protected override bool ShouldRender()
    {
        using (var l = log.DebugExScope())
        {
            InitializeTimeScale();
            InitializeTimeBars();

            return true;
        }
    }
}