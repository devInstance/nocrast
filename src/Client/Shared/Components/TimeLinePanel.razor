@{
    for (DateTime time = StartDate; time.Hour <= EndDate.Hour; time = time.AddHours(1))
    {
        if (time == StartDate)
        {
            <div class="@(time.Hour % 2 == 1 ? "odd-lavel" : "even-label")" style="@($"float:left;max-width: {CellWidthPercent - 1}%;width:{CellWidthPercent - 1}%")"><small>@(time.ToString("hhtt").ToLower())</small></div>
        }
        else if (time.Hour == EndDate.Hour - 1)
        {
            <div class="@(time.Hour % 2 == 1 ? "odd-lavel" : "even-label")" style="@($"float:left;max-width: {CellWidthPercent - 1}%;width:{CellWidthPercent - 1}%")"><small>@(time.ToString("hhtt").ToLower())</small></div>
        }
        else if (time.Hour == EndDate.Hour)
        {
            <div class="@(time.Hour % 2 == 1 ? "odd-lavel" : "even-label")" style="@($"float:left;max-width: 1%;width:1%")"><small>@(time.ToString("hhtt").ToLower())</small></div>
        }
        else
        {
            <div class="@(time.Hour % 2 == 1 ? "odd-lavel" : "even-label")" style="@($"float:left;max-width: {CellWidthPercent}%;width:{CellWidthPercent}%")"><small>@(time.ToString("hhtt").ToLower())</small></div>
        }
    }
}

@if (Items != null)
{
    <svg class="chart" width="100%" height="@(Items.Length * 36 + 10)" aria-labelledby="title desc" role="img">
        @for (int i = 0, count = EndDate.Hour - StartDate.Hour; i < count; i++)
        {
            <line x1="@($"{i * CellWidthPercent}%")" y1="0" x2="@($"{i * CellWidthPercent}%")" y2="16" stroke="grey"></line>
            <line x1="@($"{i * CellWidthPercent + CellWidthPercent / 2}%")" y1="0" x2="@($"{i * CellWidthPercent + CellWidthPercent / 2}%")" y2="8" stroke="grey"></line>
        }
        @if (Logs != null && Logs.Length == Items.Length)
        {
            @for (int n = 0; n < Items.Length; n++)
            {
                @if (Logs[n] != null)
                {
                    @foreach (var tl in Logs[n].Items)
                    {
                        <g class="@("bar " + (Items[n].Project != null ? Items[n].Project.Color.ToString().ToLower() : "white"))">
                            <rect x="@(((tl.StartTime.ToLocalTime().Hour + (tl.StartTime.ToLocalTime().Minute / 60.0f) - (float)StartDate.Hour) * CellWidthPercent).ToString() + "%")"
                                  y="@(n * 36 + 10)"
                                  width="@(((float)tl.GetElapsedThisPeriod(TimeProvider) / 1000.0f / 60.0f / 60.0f * CellWidthPercent).ToString() + "%")"
                                  height="26">
                            </rect>
                        </g>
                    }
                }
                @*<g>
                    <text x="10" y="@(n * 36 + 20)">@Items[n].Title</text>
                </g>*@
            }
        }
    </svg>
}

@inject TasksService Service;
@inject NotificationService NotificationServ;
@inject ITimeProvider TimeProvider;
@inject ILogProvider LogProvider;

@code {
    [Parameter]
    public TaskItem[] Items { get; set; }

    [Parameter]
    public ModelList<TimeLogItem>[] Logs { get; set; }

    private DateTime StartDate { get; set; }
    private DateTime EndDate { get; set; }
    private float CellWidthPercent { get; set; }

    private ILog log;

    protected override void OnInitialized()
    {
        log = LogProvider.CreateLogger(this);
        using (var l = log.DebugScope())
        {

            DateTime now = DateTime.Now;

            StartDate = DateTime.Today;

            if (now.Hour < 8)
            {
                if (now.Hour > 1)
                {
                    StartDate = DateTime.Today.AddHours(now.Hour - 1);
                }
            }
            else
            {
                StartDate = DateTime.Today.AddHours(8);
            }

            if (now.Hour >= 20)
            {
                if (now.Hour < 23)
                {
                    EndDate = DateTime.Today.AddHours(now.Hour + 1);
                }
                else
                {
                    EndDate = DateTime.Today.AddHours(now.Hour);
                }
            }
            else
            {
                EndDate = DateTime.Today.AddHours(20);
            }

            CellWidthPercent = 100.0f / (EndDate.Hour - StartDate.Hour);

            NotificationServ.DataHasChanged += OnDataHasChanged;
            StateHasChanged();
        }
    }

    private void OnDataHasChanged(Object sender, EventArgs e)
    {
        StateHasChanged();
    }

}
