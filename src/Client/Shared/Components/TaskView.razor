
@inject TimersService Service;
@inject ITimeProvider TimeProvider;

@using NoCrast.Client.ModelExtensions;

<li>
    <div class="alert alert-info timer-item-container" role="document">
        <div class="timer-item-context">
            <button class="btn btn-default timer-button" @onclick="@(() => Remove())">
                <span class="oi oi-circle-x" aria-hidden="true"></span>
            </button>
        </div>
        <div class="timer-item-title">
            <span class="timer-text">
                <strong>@Task.Task.Title</strong>
            </span>
        </div>
        <div class="timer-item-time">
            <span class="timer-text">@FormatTime(Task.GetElapsedTimeSpan())</span>
        </div>
        <div class="timer-item-panel">
            @if (Task.Task.IsRunning)
            {
                <button class="btn btn-default timer-button" @onclick="@(() => Stop())">
                    <span class="oi oi-media-pause" aria-hidden="true"></span>
                </button>
            }
            else
            {
                <button class="btn btn-default timer-button" @onclick="@(() => Start())">
                    <span class="oi oi-media-play" aria-hidden="true"></span>
                </button>
            }
        </div>
    </div>
</li>

@code {
    [Parameter]
    public TaskItemView Task { get; set; }

    private string FormatTime(TimeSpan time)
    {
        return String.Format("{0:hh}:{0:mm}:{0:ss}", time);
    }

    private async void Remove()
    {
        await Service.RemoveTaskAsync(Task);
    }

    private async void Start()
    {
        Service.StartTaskAsync(Task);
    }

    private async void Stop()
    {
        Service.StopTaskAsync(Task);
    }

}
