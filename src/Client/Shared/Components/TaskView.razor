
<li>
    <div class="alert @(IsActive ? "alert-danger" : "alert-info") container-fluid timer-link" role="document">
        <div class="d-flex flex-row">
            @if (ShowNavigationButton)
            {
                <div class="d-flex mr-3">
                    <div class="align-self-center">
                        <NavLink href="@($"task/{Item.Id}")" Match="NavLinkMatch.All">
                            <span class="oi oi-chevron-right" aria-hidden="true"></span>
                        </NavLink>
                    </div>
                </div>
            }
            <div class="d-flex flex-column flex-grow-1">
                <div class="d-flex flex-row">
                    <div class="align-self-center">
                        @if (!IsEditing)
                        {
                            <span class="timer-text-title">
                                <strong>@Item.Title</strong>
                                <button class="btn btn-default timer-button" @onclick="@(() => StartEditing())">
                                    <span class="oi oi-pencil small-timer-button" aria-hidden="true"></span>
                                </button>
                            </span>
                            <span>
                                <small class="text-muted ml-1">
                                    @String.Format("{0:F1} hour(s) today", Item.GetTotalHoursSpentTodayTillNow(TimeProvider))
                                </small>
                            </span>
                        }
                        else
                        {
                            <EditForm Model="@TitleEditText" OnValidSubmit="@(() => ApplyChangesAsync())">
                                <InputText @bind-Value="@TitleEditText"></InputText>
                                <button type="submit" class="btn timer-button text-info">
                                    <span class="oi oi-circle-check" aria-hidden="true"></span>
                                </button>
                                <button class="btn timer-button text-danger" @onclick="@(()=>ResetChanges())" @onclick:preventDefault>
                                    <span class="oi oi-circle-x" aria-hidden="true"></span>
                                </button>
                            </EditForm>
                        }
                    </div>
                </div>
                <div class="d-flex flex-row">
                    <button class="btn btn-default timer-button" data-toggle="dropdown">
                        @if (TagLabels != null && TagLabels.Length > 0)
                        {
                            @foreach (var label in TagLabels)
                            {
                                <span class="badge badge-info">@label</span>
                            }
                        }
                        else
                        {
                            <span class="badge badge-info">+ Tag</span>
                        }
                    </button>
                    <div class="dropdown-menu">
                        @if (NotAssignedTags != null && NotAssignedTags.Length > 0)
                        {
                            <ul>
                                @foreach (var tag in NotAssignedTags)
                                {
                                    <li><button class="btn btn-default timer-button" @onclick="@(() => AddTagByIdAsync(tag.Id))"><span class="badge badge-info">@tag.Name</span></button></li>
                                }
                            </ul>
                        }
                        <EditForm Model="@NewTagLabel" OnValidSubmit="@(() => AddTagAsync())" class="px-4 py-3">
                            <div class="form-group">
                                <label class="form-check-label" for="newTagEdit">
                                    New tag
                                </label>
                                <InputText @bind-Value="@NewTagLabel" class="form-control" placeholder="tag name" id="newTagEdit"></InputText>
                            </div>
                            <button type="submit" class="btn btn-primary">Add</button>
                        </EditForm>
                    </div>
                </div>
            </div>
            <div class="d-flex">
                <div class="d-flex flex-row">
                    <div class="align-self-center">
                        @if (IsActive)
                        {
                            <span class="timer-text timer-text-timespan">@FormatTime(Item.GetElapsedTimeSpan(TimeProvider))</span>
                        }
                        else
                        {
                            <span class="timer-text">@String.Format("{0:F1} hour(s) today", Item.GetTotalHoursSpentToday())</span>
                        }
                    </div>
                    <div class="align-self-center">
                        @if (IsActive)
                        {
                            <button class="btn btn-default timer-active-button" @onclick="@(() => Stop())">
                                <span class="oi oi-media-pause" aria-hidden="true"></span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-default timer-active-button" @onclick="@(() => Start())">
                                <span class="oi oi-media-play" aria-hidden="true"></span>
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</li>

@inject TasksService Service;
@inject ITimeProvider TimeProvider;
@inject ILogProvider LogProvider;

@code {
    [Parameter]
    public TaskItem Item { get; set; }

    [Parameter]
    public bool ShowNavigationButton { get; set; }

    private bool IsEditing { get; set; }
    private string TitleEditText { get; set; }

    private ILog log;


    private TagItem[] Tags { get; set; }

    private TagItem[] NotAssignedTags { get; set; }

    private string[] TagLabels
    {
        get
        {
            //TODO: run only once and cache, optimize
            var result = new List<string>();
            if (Tags == null) return null;
            for(int i =  0; i < Tags.Length && i < 5; i ++) //TODO: make limit configurable
            {
                result.Add(Tags[i].Name);
            }
            if(Tags.Length > 5)
            {
                result.Add("...");
            }
            return result.ToArray();
        }
    }

    private string NewTagLabel { get; set; }

    public bool IsActive
    {
        get
        {
            return Item.IsRunning;
        }
    }

    //TODO: Add form validation for title
    protected async override Task OnInitializedAsync()
    {
        IsEditing = false;
        log = LogProvider.CreateLogger(this);

        await RefreshDataAsync();
    }

    public async Task RefreshDataAsync()
    {
        NewTagLabel = "";
        if (Item != null)
        {
            Tags = await Service.GetTagsAsync(Item);
            NotAssignedTags = await Service.GetNotAssignedTagsAsync(Tags);

            StateHasChanged();
        }
    }

    private string FormatTime(TimeSpan time)
    {
        return String.Format("{0:hh}:{0:mm}:{0:ss}", time);
    }

    private void Start()
    {
        Service.StartTaskAsync(Item);
    }

    private void Stop()
    {
        Service.StopTaskAsync(Item);
    }

    private void StartEditing()
    {
        TitleEditText = Item.Title;
        IsEditing = true;
    }

    private async void ApplyChangesAsync()
    {
        IsEditing = false;
        log.D("ApplyChanges");

        Item = await Service.UpdateTaskTitleAsync(Item, TitleEditText);
        StateHasChanged();
    }

    private void ResetChanges()
    {
        IsEditing = false;
        TitleEditText = Item.Title;
        log.D("ResetChanges");
    }

    private async void AddTagAsync()
    {
        log.D("ApplyChanges");

        await Service.AddOrCreateTagAsync(Item, NewTagLabel);
        await RefreshDataAsync();
    }

    private async void AddTagByIdAsync(string id)
    {
        log.D("ApplyChanges");

        await Service.AddTagAsync(Item, id);
        await RefreshDataAsync();
    }
}
