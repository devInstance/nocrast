<div class="card @(IsActive? "timer-card-active" : "timer-card")">
    <div class="card-header @(Item.Project != null ? "bg-primary text-white" : "bg-secondary text-secondary")">
        <p class="card-text">
            <NavLink href="@($"tasks/{Item.Id}")" Match="NavLinkMatch.All">
                <strong><span class="card-title text-white">@Item.Title</span></strong>
            </NavLink>
            @if (Item.Project != null)
            {
                <span>·</span>
                <NavLink class="@(Item.Project != null ? (IsActive ? "text-white" : "text-white") : (IsActive ? "text-danger" : "text-secondary"))"
                         href="@($"projects/{Item.Project.Id}")"
                         Match="NavLinkMatch.All">
                    @Item.Project.Title
                </NavLink>
            }
        </p>
    </div>
    <div class="card-body">
        <p class="card-text">
            @if (IsActive)
            {
                <span class="timer-text timer-text-timespan">
                    @FormatingUtils.FormatTimerElapsedTime(Item, TimeProvider)
                </span>
                <button class="btn btn-default timer-active-button" @onclick="@(() => Stop())">
                    <span class="oi oi-large oi-media-pause" aria-hidden="true"></span>
                </button>
            }
            else
            {
                <button class="btn btn-default timer-active-button" @onclick="@(() => Start())">
                    <span class="oi oi-large oi-play-circle" aria-hidden="true"></span>
                </button>
                <small class="text-muted">@String.Format("{0:F1}", Item.GetTotalHoursSpentTodayTillNow(TimeProvider)) hrs today</small>
            }
        </p>
        @if (TagLabels != null && TagLabels.Length > 0)
        {
            <div class="card-text">
                @foreach (var label in TagLabels)
                {
                    <span class="badge badge-info mr-1">@label</span>
                }
            </div>
        }
    </div>
</div>

@inject TasksService Service;
@inject ITimeProvider TimeProvider;
@inject ILogProvider LogProvider;

@code {
    [Parameter]
    public TaskItem Item { get; set; }

    private ILog log;

    //TODO: refactor code duplication here and in TaskDetails into a separate component
    private TagItem[] Tags { get; set; }

    private string[] TagLabels
    {
        get
        {
            //TODO: run only once and cache, optimize
            var result = new List<string>();
            if (Tags == null) return null;
            for (int i = 0; i < Tags.Length && i < 5; i++) //TODO: make limit configurable
            {
                result.Add(Tags[i].Name);
            }
            if (Tags.Length > 5)
            {
                result.Add("...");
            }
            return result.ToArray();
        }
    }

    private string NewTagLabel { get; set; }

    public bool IsActive
    {
        get
        {
            return Item.IsRunning;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        log = LogProvider.CreateLogger(this);

        await RefreshDataAsync();
    }

    public async Task RefreshDataAsync()
    {
        NewTagLabel = "";
        if (Item != null)
        {
            Tags = await Service.GetTagsAsync(Item);

            StateHasChanged();
        }
    }

    private void Start()
    {
        Service.StartTaskAsync(Item);
    }

    private void Stop()
    {
        Service.StopTaskAsync(Item);
    }
}
