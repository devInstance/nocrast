
@inject TasksService Service;
@inject ITimeProvider TimeProvider;
@inject ILogProvider LogProvider;

<li>
    <div class="alert alert-info timer-item-container" role="document">
        <div class="timer-item-context">
            <button class="btn btn-default timer-button" @onclick="@(() => Remove())">
                <span class="oi oi-x" aria-hidden="true"></span>
            </button>
        </div>
        <div class="timer-item-title left-column">
            @if (!IsEditing)
            {
                <span class="timer-text">
                    <strong>@Item.Task.Title</strong>
                    <button class="btn btn-default timer-button" @onclick="@(() => StartEditing())">
                        <span class="oi oi-pencil small-timer-button" aria-hidden="true"></span>
                    </button>
                </span>
            }
            else
            {
                <EditForm Model="@TitleEditText" OnValidSubmit="@(() => ApplyChangesAsync())">
                    <InputText @bind-Value="@TitleEditText"></InputText>
                    <button type="submit" class="btn timer-button text-info">
                        <span class="oi oi-circle-check" aria-hidden="true"></span>
                    </button>
                    <button class="btn timer-button text-danger" @onclick="@(()=>ResetChanges())" @onclick:preventDefault>
                        <span class="oi oi-circle-x" aria-hidden="true"></span>
                    </button>
                </EditForm>
            }
        </div>
        <div class="timer-item-time left-column">
            <span class="timer-text">@String.Format("Today {0:F1}", Item.TotalHoursSpentToday) hour(s)</span>
        </div>
        <div class="timer-item-panel">
            <button class="btn btn-default timer-button" @onclick="@(() => Start())">
                <span class="oi oi-media-play" aria-hidden="true"></span>
            </button>
        </div>
        <TimeLogPanelView Item="Item"></TimeLogPanelView>
    </div>
</li>

@code {
    [Parameter]
    public TaskItemView Item { get; set; }

    private EditContext editContext;
    private bool IsEditing { get; set; }
    private string TitleEditText { get; set; }

    private ILog log;

    //TODO: Add form validation for title
    protected override void OnInitialized()
    {
        IsEditing = false;
        log = LogProvider.CreateLogger(this);

        TitleEditText = Item.Task.Title;
    }

    private async void Remove()
    {
        await Service.RemoveTaskAsync(Item);
    }

    private void Start()
    {
        Service.StartTaskAsync(Item);
    }

    private void StartEditing()
    {
        IsEditing = true;
    }

    private async void ApplyChangesAsync()
    {
        IsEditing = false;
        log.D("ApplyChanges");

        Item.Task = await Service.UpdateTaskTitleAsync(Item.Task, TitleEditText);
        StateHasChanged();
    }

    private void ResetChanges()
    {
        IsEditing = false;
        TitleEditText = Item.Task.Title;
        log.D("ResetChanges");
    }
}
