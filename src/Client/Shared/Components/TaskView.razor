
@inject TasksService Service;
@inject ITimeProvider TimeProvider;

@using NoCrast.Client.ModelExtensions;

<li>
    <div class="alert alert-info timer-item-container" role="document">
        <div class="timer-item-context">
            <button class="btn btn-default timer-button" @onclick="@(() => Remove())">
                <span class="oi oi-circle-x" aria-hidden="true"></span>
            </button>
        </div>
        <div class="timer-item-title">
            <span class="timer-text">
                <strong>@Item.Task.Title</strong>
            </span>
            <span>
                |
            </span>
            <span>
                @String.Format("{0:F1}", Item.TotalHoursSpent) hour(s)
            </span>
        </div>
        <div class="timer-item-time">
            <span class="timer-text">@FormatTime(Item.GetElapsedTimeSpan())</span>
        </div>
        <div class="timer-item-panel">
            @if (Item.Task.IsRunning)
            {
                <button class="btn btn-default timer-button" @onclick="@(() => Stop())">
                    <span class="oi oi-media-pause" aria-hidden="true"></span>
                </button>
            }
            else
            {
                <button class="btn btn-default timer-button" @onclick="@(() => Start())">
                    <span class="oi oi-media-play" aria-hidden="true"></span>
                </button>
            }
        </div>
        <div class="timer-item-timelog-panel">
            <button class="btn btn-default timer-button" @onclick="@(() => ToggleLogPanel())">
                @if (IsTimeLogShown)
                {
                    <span class="oi oi-chevron-top" aria-hidden="true"></span>
                }
                else
                {
                    <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
                }
            </button>
            @if (IsTimeLogShown)
            {
                @if (TimeLog != null)
                {
                    <ul class="timer-list">
                        @foreach (var tl in TimeLog)
                        {
                            <li>@FormatTime(TimeSpan.FromMilliseconds(tl.ElapsedMilliseconds))</li>
                        }
                    </ul>
                }
                else
                {
                    <div>Loading ...</div>
                }
            }
        </div>
    </div>
</li>

@code {
    [Parameter]
    public TaskItemView Item { get; set; }
    public List<TimeLogItem> TimeLog { get; set; }
    public bool IsTimeLogShown { get; set; }

    protected override void OnInitialized()
    {
        IsTimeLogShown = false;
    }

    private string FormatTime(TimeSpan time)
    {
        return String.Format("{0:hh}:{0:mm}:{0:ss}", time);
    }

    private async void Remove()
    {
        await Service.RemoveTaskAsync(Item);
    }

    private void Start()
    {
        Service.StartTaskAsync(Item);
    }

    private void Stop()
    {
        Service.StopTaskAsync(Item);
    }

    private async void ToggleLogPanel()
    {
        if(!IsTimeLogShown)
        {
            IsTimeLogShown = true;
            if(TimeLog == null)
            {
                TimeLog = await Service.GetTimeLogItemsAsync(Item);
            }
        }
        else
        {
            IsTimeLogShown = false;
        }
    }
}
