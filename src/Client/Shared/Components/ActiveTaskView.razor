
@inject TasksService Service;
@inject ITimeProvider TimeProvider;

@using NoCrast.Client.ModelExtensions;

<li>
    <div class="alert alert-danger timer-active-item-container" role="document">
        <div class="timer-active-item-title left-column">
            <span class="timer-text">
                <strong>@Item.Task.Title</strong>
            </span>
            <span>
                |
            </span>
            <span>
                @String.Format("{0:F1}", Item.TotalHoursSpent) hour(s)
            </span>
        </div>
        <div class="timer-active-item-time left-column">
            <span class="timer-text timer-text-timespan">@FormatTime(Item.GetElapsedTimeSpan())</span>
        </div>
        <div class="timer-active-item-panel">
            @if (Item.Task.IsRunning)
            {
                <button class="btn btn-default timer-active-button" @onclick="@(() => Stop())">
                    <span class="oi oi-media-pause" aria-hidden="true"></span>
                </button>
            }
            else
            {
                <button class="btn btn-default timer-active-button" @onclick="@(() => Start())">
                    <span class="oi oi-media-play" aria-hidden="true"></span>
                </button>
            }
        </div>
        <TimeLogPanelView Item="Item"></TimeLogPanelView>
    </div>
</li>

@code {
    [Parameter]
    public TaskItemView Item { get; set; }

    protected override void OnInitialized()
    {
    }

    private string FormatTime(TimeSpan time)
    {
        return String.Format("{0:hh}:{0:mm}:{0:ss}", time);
    }

    private void Start()
    {
        Service.StartTaskAsync(Item);
    }

    private void Stop()
    {
        Service.StopTaskAsync(Item);
    }
}
